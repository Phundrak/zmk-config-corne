#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4
#define MACRO_TAP_MS 15

#define ALT_CODE(name, n1, n2, n3, n4)                                                     \
    name: name {                                                                           \
        compatible = "zmk,behavior-macro";                                                 \
        #binding-cells = <0>;                                                              \
        bindings =                                                                         \
            <&macro_press>,                                                                \
            <&kp LALT>,                                                                    \
            <&macro_tap>,                                                                  \
            <&kp KP_NUMBER_##n1 &kp KP_NUMBER_##n2 &kp KP_NUMBER_##n3 &kp KP_NUMBER_##n4>, \
            <&macro_release>,                                                              \
            <&kp LALT>;                                                                    \
                                                                                           \
        label = #name;                                                                     \
        tap-ms = <MACRO_TAP_MS>;                                                           \
    };
#define HT(name, hold, tap)                   \
    name: name {                              \
        compatible = "zmk,behavior-hold-tap"; \
        label = #name;                        \
        bindings = <hold>, <tap>;             \
                                              \
        #binding-cells = <2>;                 \
        tapping-term-ms = <200>;              \
    };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        caps: caps {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS";
            #binding-cells = <0>;
            continue-list = <MINUS BACKSPACE>;
        };

        paraless: paraless {
            compatible = "zmk,behavior-mod-morph";
            label = "PARALESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        paragreat: paragreat {
            compatible = "zmk,behavior-mod-morph";
            label = "PARAGREAT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        HT(EAcuteShiftRAlt, &mo, &EAcuteShift)
        HT(LShiftRAlt, &mo, &kp)
        HT(EShiftRAlt, &mo, &Euro)
        HT(TShiftRAlt, &mo, &none)
        HT(EAcuteSymRAlt, &mo, &GuillemetLeft)
        HT(LSymRAlt, &mo, &kp)
        HT(EMod3RAlt, &mo, &trans)
    };

    combos {
        compatible = "zmk,combos";

        delete {
            bindings = <&kp DELETE>;
            key-positions = <41 40>;
            layers = <0>;
        };

        pgup {
            bindings = <&kp PAGE_UP>;
            key-positions = <28 29>;
            layers = <0>;
        };

        pgdown {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <30 31>;
            layers = <0>;
        };

        ScrCpy {
            bindings = <&kp PSCRN>;
            key-positions = <12 13>;
            layers = <0>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <37 38>;
            layers = <0>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <40 39>;
            layers = <0>;
        };

        SysLayer {
            bindings = <&mo 9>;
            key-positions = <38 39>;
        };

        reset_layers {
            bindings = <&to 0>;
            key-positions = <24 35>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <36 37>;
        };

        LeftShift {
            bindings = <&kp LSHFT>;
            key-positions = <16 17>;
        };

        RightShift {
            bindings = <&kp RSHFT>;
            key-positions = <18 19>;
        };
    };

    //

    macros {
        ALT_CODE(Ae, 0, 2, 3, 0)               // æ
        ALT_CODE(AeShift, 0, 1, 9, 8)          // Æ
        ALT_CODE(AposTypo, 0, 1, 4, 6)         // ’
        ALT_CODE(CCedillaShift, 0, 1, 9, 9)    // Ç
        ALT_CODE(EAcuteShift, 0, 2, 0, 1)      // É
        ALT_CODE(Ellipsis, 0, 1, 3, 3)         // …
        ALT_CODE(EmDash, 0, 1, 5, 1)           // — Em dash
        ALT_CODE(EnDash, 0, 1, 5, 0)           // – En dash
        ALT_CODE(Euro, 0, 1, 2, 8)             // – En dash
        ALT_CODE(GraveAccent, 0, 0, 9, 6)      // `
        ALT_CODE(InvExcl, 0, 1, 6, 1)          // ¡
        ALT_CODE(InvQues, 0, 1, 9, 1)          // ¿
        ALT_CODE(OeLower, 0, 1, 5, 6)          // œ
        ALT_CODE(OeShift, 0, 1, 4, 0)          // Œ
        ALT_CODE(Pilcrow, 0, 1, 8, 2)          // ¶
        ALT_CODE(PourMille, 0, 1, 3, 7)        // ’
        ALT_CODE(Tilde, 0, 1, 2, 6)            // ~
        ALT_CODE(Pound, 0, 1, 5, 6)            // £
        ALT_CODE(Copyright, 0, 1, 6, 9)        // ©
        ALT_CODE(Trademark, 0, 1, 5, 3)        // ™
        ALT_CODE(Registered, 0, 1, 7, 4)       // ®
        ALT_CODE(SingleQuoteLow, 0, 1, 3, 0)   // ‚
        ALT_CODE(SingleQuoteLeft, 0, 1, 4, 5)  // ‘
        ALT_CODE(SingleQuoteRight, 0, 1, 4, 6) // ’
        ALT_CODE(MiddleDot, 0, 1, 8, 3)        // ·
        ALT_CODE(NBSP, 0, 1, 6, 0)             // &nbsp;
        ALT_CODE(Dagger, 0, 1, 3, 4)           // †
        ALT_CODE(DDagger, 0, 1, 3, 5)          // ‡
        ALT_CODE(GuillemetLeft, 0, 1, 7, 1)    // «
        ALT_CODE(GuillemetRight, 0, 1, 8, 7)   // »
        ALT_CODE(Circumflex, 0, 0, 9, 4)       // ^
        ALT_CODE(PlusMinus, 0, 1, 7, 7)        // ±
        ALT_CODE(Div, 0, 2, 4, 7)              // ÷
        ALT_CODE(Mult, 0, 2, 1, 5)             // ×
        ALT_CODE(DoubleQuoteLow, 0, 1, 3, 2)   // „
        ALT_CODE(DoubleQuoteLeft, 0, 1, 4, 7)  // “
        ALT_CODE(DoubleQuoteRight, 0, 1, 4, 8) // ”
        ALT_CODE(NotSign, 0, 1, 7, 2)          // ¬
        ALT_CODE(Quarter, 0, 1, 8, 8)          // ¼
        ALT_CODE(Half, 0, 1, 8, 9)             // ½
        ALT_CODE(ThreeQuarters, 0, 1, 9, 0)    // ¾

        AGraveShift: AGraveShift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N7) &kp LS(Q)>;
            label = "À";
        };

        EGraveShift: EGraveShift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N7) &kp LS(E)>;
            label = "È";
        };

        UGrave: UGrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N7) &kp U>;
            label = "ù";
        };

        UGraveShift: UGraveShift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N7) &kp LS(U)>;
            label = "Ù";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            display-name = "Base";

            // ------------------------------------------------------------------------------
            // |  $  |  b  |  é  |  p  |  o  |  è  |   |  ^  |  v   |  d  |  l  |  j  |  ç  |
            // |  %  |  a  |  u  |  i  |  e  |  ,  |   |  c  |  t   |  s  |  r  |  n  |  m  |
            // |  z  |  à  |  y  |  x  |  .  |  k  |   |  ’  |  q   |  g  |  h  |  f  |  w  |
            //                  | BKSP | RET | SYM |   | M&M | TAB  | SPC |

            bindings = <
&kp RIGHT_BRACKET  &kp B           &lt 2 NUMBER_2  &kp P          &kp O          &kp N7       &kp LEFT_BRACKET  &kp V    &kp D               &lt 2 L         &kp J           &kp N9
&kp LS(SQT)        &hm LEFT_GUI Q  &hm LEFT_ALT U  &hm LCTRL I    &lt 1 E        &lt 4 M      &lt 4 C           &lt 1 T  &hm LEFT_CONTROL S  &hm LEFT_ALT R  &hm LEFT_GUI N  &kp SEMICOLON
&kp W              &kp N0          &kp Y           &kp X          &kp LS(COMMA)  &kp K        &AposTypo         &kp A    &kp G               &kp H           &kp F           &kp Z
                                                   &kp BACKSPACE  &lt 8 ENTER    &lt 5 DEL    &mo 7             &kp TAB  &kp SPACE
            >;
        };

        Shift {
            display-name = "Shift";

            // ------------------------------------------------------------------------------
            // |  #  |  B  |  É  |  P  |  O  |  È  |   |  !  |  V   |  D  |  L  |  J  |  Ç  |
            // |  `  |  A  |  U  |  I  |  E  |  ;  |   |  C  |  T   |  S  |  R  |  N  |  M  |
            // |  Z  |  À  |  Y  |  X  |  :  |  K  |   |  ?  |  Q   |  G  |  H  |  F  |  W  |
            //                   |     |     |     |   |     |      |     |

            bindings = <
&kp RA(N3)    &kp LS(B)       &EAcuteShiftRAlt 3 0  &kp LS(P)               &kp LS(O)      &EGraveShift    &kp SLASH  &kp LS(V)    &kp LS(D)               &LShiftRAlt 3 LS(L)  &kp LS(J)       &CCedillaShift
&GraveAccent  &hm LGUI LS(Q)  &hm LALT LS(U)        &hm LEFT_CONTROL LS(I)  &kp LS(E)      &kp COMMA       &kp LS(C)  &kp LS(T)    &hm LEFT_CONTROL LS(S)  &hm LALT LS(R)       &hm LGUI LS(N)  &kp LS(SEMICOLON)
&kp LS(W)     &AGraveShift    &kp LS(Y)             &kp LS(X)               &kp PERIOD     &kp LS(K)       &kp LS(M)  &kp LS(A)    &kp LS(G)               &kp LS(H)            &kp LS(F)       &kp LS(Z)
                                                    &trans                  &kp LS(ENTER)  &kp LS(DEL)     &trans     &kp LS(TAB)  &NBSP
            >;
        };

        AltGr {
            display-name = "AltGr";

            // ------------------------------------------------------------------------------
            // |  –  |  |  |  ´  |  &  |  œ  |  `  |   |  ¡  |      |     |     |     |     |
            // |  ‰  |  æ  |  ù  |  ¨  |  €  |  '  |   |     |      |     |     |  ~  |     |
            // |     |  \  |  {  |  }  |  …  |  ~  |   |  ¿  |      |     |     |     |     |
            //                   |     |     |     |   |     |      |  _  |

            bindings = <
&EnDash     &kp RA(N6)  &none       &kp N1                &OeLower         &none             &InvExcl  &none            &none   &none  &none       &none
&PourMille  &Ae         &UGrave     &kp LS(LEFT_BRACKET)  &EShiftRAlt 3 0  &kp N4            &none     &TShiftRAlt 3 0  &none   &none  &kp RA(N2)  &none
&none       &kp RA(N8)  &kp RA(N4)  &kp RA(EQUAL)         &Ellipsis        &Tilde            &InvQues  &none            &none   &none  &none       &none
                                    &trans                &trans           &EMod3RAlt 6 0    &trans    &trans           &kp N8
            >;
        };

        AGS {
            display-name = "AGS";

            // ------------------------------------------------------------------------------
            // |  ¶  |     |     |  §  |  Œ  |     |   |     |      |     |  £  |     |     |
            // |     |  Æ  |  Ù  |     |     |     |   |  ©  |  ™   |     |  ®  |     |     |
            // |     |  ‚  |  ‘  |  ’  |  ·  |     |   |     |      |  †  |  ‡  |     |     |
            //                   |     |     |     |   |     |      |     |

            bindings = <
&Pilcrow  &none            &none             &kp LS(SLASH)      &OeShift    &none     &none       &none       &none    &Pound       &none  &none
&none     &AeShift         &UGraveShift      &none              &none       &none     &Copyright  &Trademark  &none    &Registered  &none  &none
&none     &SingleQuoteLow  &SingleQuoteLeft  &SingleQuoteRight  &MiddleDot  &none     &none       &none       &Dagger  &DDagger     &none  &none
                                             &trans             &trans      &trans    &trans      &trans      &NBSP
            >;
        };

        NO_HM {
            display-name = "NO-HM";

            // ------------------------------------------------------------------------------
            // |     |     |  é  |     |     |     |   |     |      |     |  l  |     |     |
            // |     |  a  |  u  |  i  |  e  |     |   |     |  t   |  s  |  r  |  n  |     |
            // |     |     |     |     |     |     |   |     |      |     |     |     |     |
            //                   |     |     |     |   |     |      |     |

            bindings = <
&trans  &trans  &kp N2  &trans  &trans  &trans    &trans  &trans  &trans  &kp L   &trans  &trans
&trans  &kp A   &kp U   &kp I   &kp E   &trans    &trans  &kp T   &kp S   &kp R   &kp N   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        SYM {
            display-name = "SYM";

            // -------------------------------------------------------------------------------
            // |  DEL |  "  |  «  |  »  |  (  |  )  |   |  @  |  +   |  -  |  /  |  *  |  =  |
            // | PRSC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  0  |  °  |
            // |  F11 | F1  | F2  | F3  | F4  | F5  |   | F6  |  F7  | F8  | F9  | F10 | F12 |
            //                    |     |     |     |   |     | HOME | END |

            bindings = <
&kp DEL          &kp N3      &EAcuteSymRAlt 6 0  &GuillemetRight  &kp N5      &kp MINUS     &kp RA(N0)  &kp LS(EQUAL)  &kp N6      &LSymRAlt 6 LS(PERIOD)  &kp BACKSLASH  &kp EQUAL
&kp PRINTSCREEN  &kp LS(N1)  &kp LS(N2)          &kp LS(N3)       &kp LS(N4)  &kp LS(N5)    &kp LS(N6)  &kp LS(N7)     &kp LS(N8)  &kp LS(N9)              &kp LS(N0)     &kp LS(MINUS)
&kp F11          &kp F1      &kp F2              &kp F3           &kp F4      &kp F5        &kp F6      &kp F7         &kp F8      &kp F9                  &kp F10        &kp F12
                                                 &none            &none       &trans        &tog 4      &kp HOME       &kp END
            >;
        };

        SymbolsAltGr {
            label = "SymAltGr";

            // -------------------------------------------------------------------------------
            // |  DEL |  —  |  <  |  >  |  [  |  ]  |   |  ^  |  ±   |     |  ÷  |  ×  |  ≠  |
            // | PRSC |  „  |  “  |  ”  |     |     |   |     |  ¬   |  ¼  |  ½  |  ¾  |     |
            // |  F11 | F1  | F2  | F3  | F4  | F5  |   | F6  |  F7  | F8  | F9  | F10 | F12 |
            //                    |     |     |     |   |     | HOME | END |

            bindings = <
&trans  &EmDash          &kp NUBS          &kp LS(NUBS)       &kp RA(N5)  &kp RA(MINUS)    &Circumflex  &PlusMinus  &none     &Div    &Mult           &none
&trans  &DoubleQuoteLow  &DoubleQuoteLeft  &DoubleQuoteRight  &none       &none            &none        &NotSign    &Quarter  &Half   &ThreeQuarters  &none
&trans  &trans           &trans            &trans             &trans      &trans           &trans       &trans      &trans    &trans  &trans          &trans
                                           &trans             &trans      &trans           &trans       &trans      &trans
            >;
        };

        MouseMedia {
            bindings = <
&none  &mkp MB1        &mmv MOVE_UP    &mkp MB2         &msc SCRL_UP      &kp C_VOL_DN    &kp C_VOL_UP  &none     &none   &none      &none  &none
&none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB3          &none           &kp LEFT      &kp DOWN  &kp UP  &kp RIGHT  &none  &none
&none  &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &msc SCRL_DOWN    &kp C_PREV      &kp C_NEXT    &none     &none   &none      &none  &none
                                       &kp C_STOP       &kp C_PLAY_PAUSE  &none           &none         &none     &none
            >;

            label = "M&M";
        };

        NUM {
            display-name = "NUM";
            bindings = <
&none  &none  &none  &none  &none  &kp KP_NUMLOCK    &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &none
&none  &none  &none  &none  &none  &none             &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &none
&none  &none  &none  &none  &none  &none             &kp KP_EQUAL     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER  &none
                     &none  &none  &none             &kp KP_ENTER     &kp KP_NUMBER_0  &kp KP_DOT
            >;
        };

        SYS {
            bindings = <
&bt BT_CLR  &none  &none  &none  &none  &none    &none  &none         &none         &none         &none  &bt BT_CLR_ALL
&none       &none  &none  &none  &none  &none    &none  &bt BT_SEL 3  &bt BT_SEL 4  &none         &none  &none
&none       &none  &none  &none  &none  &none    &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &none
                          &none  &none  &none    &to 0  &none         &none
            >;

            label = "System";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
